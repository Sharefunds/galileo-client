
/*
 * Program API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 4.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AccountsAndCardsApiService service
/*
AccountsAndCardsApiService Activate Card
Use the Activate Card endpoint to activate a physical card that has an emboss record in &#x60;status: Y&#x60;. Do not use this endpoint to activate a virtual card; instead, use the &lt;a href&#x3D;\&quot;ref:post_modifystatus\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Modify Status&lt;/a&gt; endpoint with &#x60;type: 7&#x60;.  Consult the &lt;a href&#x3D;\&quot;doc:activate-card-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Activating a Card&lt;/a&gt; procedure for more information.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostActivatecardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "CardExpiryDate" (optional.String) - 
     * @param "CardSecurityCode" (optional.String) - 
     * @param "CardNumberLastFour" (optional.String) - 
     * @param "DeactivateTemporaryCards" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault67
*/

type AccountsAndCardsApiPostActivatecardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    CardExpiryDate optional.String
    CardSecurityCode optional.String
    CardNumberLastFour optional.String
    DeactivateTemporaryCards optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostActivatecard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostActivatecardOpts) (InlineResponseDefault67, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault67
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/activateCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardExpiryDate.IsSet() {
		localVarFormParams.Add("cardExpiryDate", parameterToString(localVarOptionals.CardExpiryDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardSecurityCode.IsSet() {
		localVarFormParams.Add("cardSecurityCode", parameterToString(localVarOptionals.CardSecurityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardNumberLastFour.IsSet() {
		localVarFormParams.Add("cardNumberLastFour", parameterToString(localVarOptionals.CardNumberLastFour.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeactivateTemporaryCards.IsSet() {
		localVarFormParams.Add("deactivateTemporaryCards", parameterToString(localVarOptionals.DeactivateTemporaryCards.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault67
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Add Account
Use the Add Account endpoint to add a secondary account to an existing customer account. The account types that may be added include savings, overdraft, account with no card, virtual card, or personalized card.  Consult the &lt;a href&#x3D;\&quot;doc:add-account-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Adding an Account&lt;/a&gt; procedure for instructions on using this endpoint. Also see &lt;a href&#x3D;\&quot;doc:about-accounts#create-account-vs-add-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account vs Add Account&lt;/a&gt; in the *About Accounts* guide.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostAddaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "Location" (optional.String) - 
     * @param "LocationType" (optional.Int32) - 
     * @param "SharedBalance" (optional.Int32) - 
     * @param "FundingAccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault7
*/

type AccountsAndCardsApiPostAddaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ProdId optional.Int32
    Location optional.String
    LocationType optional.Int32
    SharedBalance optional.Int32
    FundingAccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostAddaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostAddaccountOpts) (InlineResponseDefault7, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault7
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/addAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationType.IsSet() {
		localVarFormParams.Add("locationType", parameterToString(localVarOptionals.LocationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SharedBalance.IsSet() {
		localVarFormParams.Add("sharedBalance", parameterToString(localVarOptionals.SharedBalance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FundingAccountNo.IsSet() {
		localVarFormParams.Add("fundingAccountNo", parameterToString(localVarOptionals.FundingAccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault7
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Add Card
Use the Add Card endpoint to add a new card (&lt;&lt;glossary:PAN&gt;&gt; and &lt;&lt;glossary:CAD&gt;&gt;) to an existing &lt;&lt;glossary:PRN&gt;&gt;. Cards that are created with this endpoint are active upon creation, and Galileo recommends that you have only one active card per PRN. As needed, ensure that any previous card has been marked lost, stolen, canceled, or any status but &#x60;N&#x60;.  Do not use this endpoint to create multiple spending cards that share a central balance. For that use case, Galileo recommends &lt;a href&#x3D;\&quot;doc:real-time-funding\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Real-Time Funding&lt;/a&gt; or &lt;a href&#x3D;\&quot;doc:corporate-credit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Corporate Credit&lt;/a&gt; for large numbers of cards, or for small numbers of cards you can create &lt;a href&#x3D;\&quot;doc:about-accounts#joint-accounts-and-shared-balances\&quot; target&#x3D;\&quot;_blank\&quot;&gt;one primary and multiple secondary accounts&lt;/a&gt; that share a balance.  Use this endpoint in scenarios such as these: - Replacing a virtual card that is lost, stolen, or expired - Adding another virtual card to a PRN - Replacing an instant-issue card at a storefront (for card programs with a retail integration) - Replacing a personalized card 
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostAddcardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "NewAccountNo" (optional.String) - 
     * @param "CreditLimit" (optional.Float64) - 
     * @param "SingleUse" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault20
*/

type AccountsAndCardsApiPostAddcardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ProdId optional.Int32
    NewAccountNo optional.String
    CreditLimit optional.Float64
    SingleUse optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostAddcard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostAddcardOpts) (InlineResponseDefault20, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault20
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/addCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewAccountNo.IsSet() {
		localVarFormParams.Add("newAccountNo", parameterToString(localVarOptionals.NewAccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditLimit.IsSet() {
		localVarFormParams.Add("creditLimit", parameterToString(localVarOptionals.CreditLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SingleUse.IsSet() {
		localVarFormParams.Add("singleUse", parameterToString(localVarOptionals.SingleUse.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault20
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Add Customer Note
Use the Add Customer Note endpoint to create a note that is accessible in the Galileo &lt;&lt;glossary:CST&gt;&gt;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostAddcustomernoteOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "Note" (optional.String) - 
     * @param "Sticky" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault52
*/

type AccountsAndCardsApiPostAddcustomernoteOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    Note optional.String
    Sticky optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostAddcustomernote(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostAddcustomernoteOpts) (InlineResponseDefault52, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault52
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/addCustomerNote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Note.IsSet() {
		localVarFormParams.Add("note", parameterToString(localVarOptionals.Note.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sticky.IsSet() {
		localVarFormParams.Add("sticky", parameterToString(localVarOptionals.Sticky.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault52
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Charge Off Account
Use the Charge Off Account endpoint to charge off the specified account (sweep funds and set balance to &#x60;0.00&#x60;) and move the account to &#x60;status: R&#x60; (charged off).  These are the rules for using the &#x60;chargeOffDetails&#x60; parameter: * &#x60;chargeOffDetails&#x60; accepts a JSON-formatted list with &#x60;chargeOffAmount&#x60; and &#x60;chargeOffReason&#x60; as the two keys. * The only valid values for &#x60;chargeOffReason&#x60; are the numerals 1-13, as shown in the &lt;a href&#x3D;\&quot;ref:post_chargeoffaccount#chargeoffreason\&quot; target&#x3D;\&quot;_blank\&quot;&gt;&#x60;chargeOffReason&#x60;&lt;/a&gt; table. * &#x60;chargeOffAmount&#x60; is a float that must be greater than &#x60;0&#x60;. If you pass &#x60;0&#x60; the request will fail. * &#x60;chargeOffAmount&#x60; is required when &#x60;chargeOffReason&#x60; does not equal &#x60;1&#x60;.  Example: &#x60;[{\&quot;chargeOffAmount\&quot;: 2.6, \&quot;chargeOffReason\&quot;: 5}, {\&quot;chargeOffAmount\&quot;: 4.75, \&quot;chargeOffReason\&quot;: 2}]&#x60;  To recover a charged-off account use the &lt;a href&#x3D;\&quot;ref:post_recoverchargedoffaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Recover Charged-Off Account&lt;/a&gt; endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostChargeoffaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ChargeOffDetails" (optional.String) - 
     * @param "CloseAssociatedAccounts" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostChargeoffaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ChargeOffDetails optional.String
    CloseAssociatedAccounts optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostChargeoffaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostChargeoffaccountOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chargeOffAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChargeOffDetails.IsSet() {
		localVarFormParams.Add("chargeOffDetails", parameterToString(localVarOptionals.ChargeOffDetails.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseAssociatedAccounts.IsSet() {
		localVarFormParams.Add("closeAssociatedAccounts", parameterToString(localVarOptionals.CloseAssociatedAccounts.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Commit Card PIN Change
Use the Commit Card PIN Change endpoint to complete a PIN change that was staged by using either the direct POST or direct render PIN-set methods.  Consult the &lt;a href&#x3D;\&quot;doc:direct-post-pin-set-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Direct POST PIN-Set Procedure&lt;/a&gt; or the &lt;a href&#x3D;\&quot;doc:direct-render-pin-set-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Direct Render PIN-Set Procedure&lt;/a&gt; for instructions on using this endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCommitcardpinchangeOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostCommitcardpinchangeOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCommitcardpinchange(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCommitcardpinchangeOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/commitCardPinChange"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Complete Enrollment
Use the Complete Enrollment endpoint to finalize an incomplete enrollment that was begun by &lt;a href&#x3D;\&quot;ref:post_startenrollment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Start Enrollment&lt;/a&gt; or &lt;a href&#x3D;\&quot;ref:post_createaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account&lt;/a&gt;. You must pass the same &#x60;transactionId&#x60; as the original Start Enrollment or Create Account request. Consult &lt;a href&#x3D;\&quot;doc:digital-first-program#multi-step-onboarding\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Multi-step onboarding and &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; for instructions on using this endpoint with Galileo&#x27;s integrated CIP solution.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;If this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See &lt;a href&#x3D;\\\&quot;ref:api-reference-enrollment-statuses\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Enrollment Statuses&lt;/a&gt; for more information.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCompleteenrollmentOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "Location" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "LocationType" (optional.Int32) - 
     * @param "SharedBalance" (optional.Int32) - 
     * @param "Offline" (optional.Int32) - 
     * @param "PrimaryAccount" (optional.String) - 
     * @param "ExternalAccountId" (optional.String) - 
     * @param "EmbossLine2" (optional.String) - 
     * @param "FundingAccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault39
*/

type AccountsAndCardsApiPostCompleteenrollmentOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    Location optional.String
    AccountNo optional.String
    ProdId optional.Int32
    LocationType optional.Int32
    SharedBalance optional.Int32
    Offline optional.Int32
    PrimaryAccount optional.String
    ExternalAccountId optional.String
    EmbossLine2 optional.String
    FundingAccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCompleteenrollment(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCompleteenrollmentOpts) (InlineResponseDefault39, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault39
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/completeEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationType.IsSet() {
		localVarFormParams.Add("locationType", parameterToString(localVarOptionals.LocationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SharedBalance.IsSet() {
		localVarFormParams.Add("sharedBalance", parameterToString(localVarOptionals.SharedBalance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offline.IsSet() {
		localVarFormParams.Add("offline", parameterToString(localVarOptionals.Offline.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryAccount.IsSet() {
		localVarFormParams.Add("primaryAccount", parameterToString(localVarOptionals.PrimaryAccount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExternalAccountId.IsSet() {
		localVarFormParams.Add("externalAccountId", parameterToString(localVarOptionals.ExternalAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EmbossLine2.IsSet() {
		localVarFormParams.Add("embossLine2", parameterToString(localVarOptionals.EmbossLine2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FundingAccountNo.IsSet() {
		localVarFormParams.Add("fundingAccountNo", parameterToString(localVarOptionals.FundingAccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault39
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Create Account
Use the Create Account endpoint to create an account for a new customer. You can use this endpoint for personalized, instant issue, and secondary products.  This endpoint runs &lt;&lt;glossary:CIP&gt;&gt; if you are using Galileo&#x27;s integrated CIP process. In contrast with the &lt;a href&#x3D;\&quot;ref:post_startenrollment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Start Enrollment&lt;/a&gt; endpoint, Create Account creates a customer record and at the same time creates an account. Depending on product settings, it also creates a card and loads funds onto it.  Consult the &lt;a href&#x3D;\&quot;doc:create-account-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating an Account&lt;/a&gt; procedure for instructions on using this endpoint, and consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for how to use this endpoint with Galileo&#x27;s integrated CIP solution. The instructions include a flowchart to illustrate how Create Account works in the Galileo system. Also see &lt;a href&#x3D;\&quot;doc:about-accounts#create-account-vs-add-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account vs Add Account&lt;/a&gt; in the *About Accounts* guide.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;You can receive PCI-sensitive information only if your provider parameters permit it.\&quot; } [/block]  #### Duplicate use of customer ID Galileo can configure your product parameters to allow or disallow the duplicate use of customer IDs such as SSNs across your programs. (If one of your prospective customers already has a product with another Galileo partner, no duplicate is detected.)  #### CIP response If you are using Galileo&#x27;s integrated &lt;&lt;glossary:CIP&gt;&gt; solution, the Create Account response includes the verdict. Consult &lt;a href&#x3D;\&quot;doc:customer-id-verification#create-account-and-create-virtual-card-account-process\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account and Create Virtual Account Process&lt;/a&gt; in the *Customer ID Verification (CIP/KYC)* guide for more information.  #### Test names in the CV environment In the &lt;&lt;glossary:CV&gt;&gt; environment only, you can use specific names with the Create Account endpoint to trigger different &lt;&lt;glossary:CIP&gt;&gt; responses. For the &#x60;firstName&#x60;, &#x60;middleName&#x60;, and &#x60;lastName&#x60; parameters, use these values: * &#x60;John F Smith&#x60; &amp;mdash; Triggers a CIP failure (F) * &#x60;John R Smith&#x60; &amp;mdash; Triggers a CIP refer (R) * &#x60;John P Smith&#x60; &amp;mdash; Triggers a CIP pass (P)  Do not use these test names in &lt;&lt;glossary:Production&gt;&gt;.  #### Required fields Most input parameters for this endpoint are not required, to accommodate various use cases. If you would like some of the parameters to be required, populate the PINED product parameter with the parameters to be required. For example: &#x60;idType,id&#x60;.   If this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See &lt;a href&#x3D;\&quot;ref:api-reference-enrollment-statuses\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enrollment Statuses&lt;/a&gt; for more information.  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCreateaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "Id" (optional.String) - 
     * @param "IdType2" (optional.Int32) - 
     * @param "Id2" (optional.String) - 
     * @param "LocationType" (optional.Int32) - 
     * @param "Location" (optional.String) - 
     * @param "Locale" (optional.String) - 
     * @param "ExternalAccountId" (optional.String) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.Time) - 
     * @param "Address1" (optional.String) - 
     * @param "Address2" (optional.String) - 
     * @param "Address3" (optional.String) - 
     * @param "Address4" (optional.String) - 
     * @param "Address5" (optional.String) - 
     * @param "City" (optional.String) - 
     * @param "State" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "CountryCode" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "MobileCarrierId" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "WebUid" (optional.String) - 
     * @param "WebPwd" (optional.String) - 
     * @param "SecretQuestion" (optional.String) - 
     * @param "SecretAnswer" (optional.String) - 
     * @param "IncomeSource" (optional.String) - 
     * @param "Occupation" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "LoadAmount" (optional.Float32) - 
     * @param "LoadType" (optional.String) - 
     * @param "PrimaryAccount" (optional.String) - 
     * @param "FundingAccountNo" (optional.String) - 
     * @param "SharedBalance" (optional.Int32) - 
     * @param "UserData" (optional.String) - 
     * @param "Offline" (optional.Int32) - 
     * @param "VerifyOnly" (optional.Int32) - 
     * @param "CipStatus" (optional.String) - 
     * @param "EmbossLine2" (optional.String) - 
     * @param "ProviderAssessedFee" (optional.Float32) - 
     * @param "LoadFromAccountNo" (optional.String) - 
     * @param "SweepDate" (optional.Time) - 
     * @param "ExpressMail" (optional.String) - 
     * @param "ShipToAddressPermanent" (optional.String) - 
     * @param "ShipToAddress1" (optional.String) - 
     * @param "ShipToAddress2" (optional.String) - 
     * @param "ShipToCity" (optional.String) - 
     * @param "ShipToState" (optional.String) - 
     * @param "ShipToPostalCode" (optional.String) - 
     * @param "ShipToCountryCode" (optional.String) - 
     * @param "BusinessName" (optional.String) - 
     * @param "MobilePhoneCountryCode" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault4
*/

type AccountsAndCardsApiPostCreateaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    IdType optional.Int32
    Id optional.String
    IdType2 optional.Int32
    Id2 optional.String
    LocationType optional.Int32
    Location optional.String
    Locale optional.String
    ExternalAccountId optional.String
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.Time
    Address1 optional.String
    Address2 optional.String
    Address3 optional.String
    Address4 optional.String
    Address5 optional.String
    City optional.String
    State optional.String
    PostalCode optional.String
    CountryCode optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    MobileCarrierId optional.String
    Email optional.String
    WebUid optional.String
    WebPwd optional.String
    SecretQuestion optional.String
    SecretAnswer optional.String
    IncomeSource optional.String
    Occupation optional.String
    ProdId optional.Int32
    LoadAmount optional.Float32
    LoadType optional.String
    PrimaryAccount optional.String
    FundingAccountNo optional.String
    SharedBalance optional.Int32
    UserData optional.String
    Offline optional.Int32
    VerifyOnly optional.Int32
    CipStatus optional.String
    EmbossLine2 optional.String
    ProviderAssessedFee optional.Float32
    LoadFromAccountNo optional.String
    SweepDate optional.Time
    ExpressMail optional.String
    ShipToAddressPermanent optional.String
    ShipToAddress1 optional.String
    ShipToAddress2 optional.String
    ShipToCity optional.String
    ShipToState optional.String
    ShipToPostalCode optional.String
    ShipToCountryCode optional.String
    BusinessName optional.String
    MobilePhoneCountryCode optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCreateaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCreateaccountOpts) (InlineResponseDefault4, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/createAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType2.IsSet() {
		localVarFormParams.Add("idType2", parameterToString(localVarOptionals.IdType2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		localVarFormParams.Add("id2", parameterToString(localVarOptionals.Id2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationType.IsSet() {
		localVarFormParams.Add("locationType", parameterToString(localVarOptionals.LocationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarFormParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExternalAccountId.IsSet() {
		localVarFormParams.Add("externalAccountId", parameterToString(localVarOptionals.ExternalAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarFormParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarFormParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarFormParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address4.IsSet() {
		localVarFormParams.Add("address4", parameterToString(localVarOptionals.Address4.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address5.IsSet() {
		localVarFormParams.Add("address5", parameterToString(localVarOptionals.Address5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarFormParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarFormParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarFormParams.Add("countryCode", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobileCarrierId.IsSet() {
		localVarFormParams.Add("mobileCarrierId", parameterToString(localVarOptionals.MobileCarrierId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebUid.IsSet() {
		localVarFormParams.Add("webUid", parameterToString(localVarOptionals.WebUid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebPwd.IsSet() {
		localVarFormParams.Add("webPwd", parameterToString(localVarOptionals.WebPwd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretQuestion.IsSet() {
		localVarFormParams.Add("secretQuestion", parameterToString(localVarOptionals.SecretQuestion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretAnswer.IsSet() {
		localVarFormParams.Add("secretAnswer", parameterToString(localVarOptionals.SecretAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncomeSource.IsSet() {
		localVarFormParams.Add("incomeSource", parameterToString(localVarOptionals.IncomeSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Occupation.IsSet() {
		localVarFormParams.Add("occupation", parameterToString(localVarOptionals.Occupation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadAmount.IsSet() {
		localVarFormParams.Add("loadAmount", parameterToString(localVarOptionals.LoadAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadType.IsSet() {
		localVarFormParams.Add("loadType", parameterToString(localVarOptionals.LoadType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryAccount.IsSet() {
		localVarFormParams.Add("primaryAccount", parameterToString(localVarOptionals.PrimaryAccount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FundingAccountNo.IsSet() {
		localVarFormParams.Add("fundingAccountNo", parameterToString(localVarOptionals.FundingAccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SharedBalance.IsSet() {
		localVarFormParams.Add("sharedBalance", parameterToString(localVarOptionals.SharedBalance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserData.IsSet() {
		localVarFormParams.Add("userData", parameterToString(localVarOptionals.UserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offline.IsSet() {
		localVarFormParams.Add("offline", parameterToString(localVarOptionals.Offline.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VerifyOnly.IsSet() {
		localVarFormParams.Add("verifyOnly", parameterToString(localVarOptionals.VerifyOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CipStatus.IsSet() {
		localVarFormParams.Add("cipStatus", parameterToString(localVarOptionals.CipStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EmbossLine2.IsSet() {
		localVarFormParams.Add("embossLine2", parameterToString(localVarOptionals.EmbossLine2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderAssessedFee.IsSet() {
		localVarFormParams.Add("providerAssessedFee", parameterToString(localVarOptionals.ProviderAssessedFee.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadFromAccountNo.IsSet() {
		localVarFormParams.Add("loadFromAccountNo", parameterToString(localVarOptionals.LoadFromAccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SweepDate.IsSet() {
		localVarFormParams.Add("sweepDate", parameterToString(localVarOptionals.SweepDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpressMail.IsSet() {
		localVarFormParams.Add("expressMail", parameterToString(localVarOptionals.ExpressMail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddressPermanent.IsSet() {
		localVarFormParams.Add("shipToAddressPermanent", parameterToString(localVarOptionals.ShipToAddressPermanent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddress1.IsSet() {
		localVarFormParams.Add("shipToAddress1", parameterToString(localVarOptionals.ShipToAddress1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddress2.IsSet() {
		localVarFormParams.Add("shipToAddress2", parameterToString(localVarOptionals.ShipToAddress2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToCity.IsSet() {
		localVarFormParams.Add("shipToCity", parameterToString(localVarOptionals.ShipToCity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToState.IsSet() {
		localVarFormParams.Add("shipToState", parameterToString(localVarOptionals.ShipToState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToPostalCode.IsSet() {
		localVarFormParams.Add("shipToPostalCode", parameterToString(localVarOptionals.ShipToPostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToCountryCode.IsSet() {
		localVarFormParams.Add("shipToCountryCode", parameterToString(localVarOptionals.ShipToCountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessName.IsSet() {
		localVarFormParams.Add("businessName", parameterToString(localVarOptionals.BusinessName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhoneCountryCode.IsSet() {
		localVarFormParams.Add("mobilePhoneCountryCode", parameterToString(localVarOptionals.MobilePhoneCountryCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault4
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Create Provisioning Request
Use the Create Provisioning Request endpoint to push-provision a virtual card to a mobile wallet. This endpoint is part of a multiple-step integration that must be completed with each mobile wallet partner. Consult the &lt;a href&#x3D;\&quot;doc:creating-a-provisioning-request\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating a Provisioning Request&lt;/a&gt; guide for instructions on using this endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCreateprovisioningrequestOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "WalletProvider" (optional.Int32) - 
     * @param "Cert1" (optional.String) - 
     * @param "Cert2" (optional.String) - 
     * @param "Nonce" (optional.String) - 
     * @param "NonceSignature" (optional.String) - 
     * @param "ClientWalletAccountID" (optional.String) - 
     * @param "ClientDeviceID" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault21
*/

type AccountsAndCardsApiPostCreateprovisioningrequestOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    WalletProvider optional.Int32
    Cert1 optional.String
    Cert2 optional.String
    Nonce optional.String
    NonceSignature optional.String
    ClientWalletAccountID optional.String
    ClientDeviceID optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCreateprovisioningrequest(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCreateprovisioningrequestOpts) (InlineResponseDefault21, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault21
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/createProvisioningRequest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WalletProvider.IsSet() {
		localVarFormParams.Add("walletProvider", parameterToString(localVarOptionals.WalletProvider.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cert1.IsSet() {
		localVarFormParams.Add("cert1", parameterToString(localVarOptionals.Cert1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cert2.IsSet() {
		localVarFormParams.Add("cert2", parameterToString(localVarOptionals.Cert2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Nonce.IsSet() {
		localVarFormParams.Add("nonce", parameterToString(localVarOptionals.Nonce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NonceSignature.IsSet() {
		localVarFormParams.Add("nonceSignature", parameterToString(localVarOptionals.NonceSignature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientWalletAccountID.IsSet() {
		localVarFormParams.Add("clientWalletAccountID", parameterToString(localVarOptionals.ClientWalletAccountID.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClientDeviceID.IsSet() {
		localVarFormParams.Add("clientDeviceID", parameterToString(localVarOptionals.ClientDeviceID.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault21
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Create Single-Use Virtual Card
Use the Create Single-Use Virtual Card endpoint to create a single-use virtual card for a BNPL customer. To use this endpoint with a product, the SUVC product parameter must be set to Y, indicating that the product is a single-use virtual card.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCreatesingleusevirtualcardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "PrimaryAccountNo" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "CreditLimit" (optional.Float64) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault22
*/

type AccountsAndCardsApiPostCreatesingleusevirtualcardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    PrimaryAccountNo optional.String
    ProdId optional.Int32
    CreditLimit optional.Float64
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCreatesingleusevirtualcard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCreatesingleusevirtualcardOpts) (InlineResponseDefault22, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault22
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/createSingleUseVirtualCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryAccountNo.IsSet() {
		localVarFormParams.Add("primaryAccountNo", parameterToString(localVarOptionals.PrimaryAccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditLimit.IsSet() {
		localVarFormParams.Add("creditLimit", parameterToString(localVarOptionals.CreditLimit.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault22
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Create Virtual Card Account
Use the Create Virtual Card Account endpoint to create a virtual card account for a new customer. To create any other type of account for a new customer use the &lt;a href&#x3D;\&quot;ref:post_createaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account&lt;/a&gt; endpoint.  Create Virtual Account is similar to Create Account except that it accepts only virtual card product IDs for &#x60;prodId&#x60;. Consult the &lt;a href&#x3D;\&quot;doc:create-account-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating an Account&lt;/a&gt; procedure for instructions on using this endpoint, and consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for how to use this endpoint with Galileo&#x27;s integrated CIP solution.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;You must be PCI-compliant to use this endpoint. If you are not PCI compliant, use the &lt;a href&#x3D;\\\&quot;ref:post_createaccount\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Create Account&lt;/a&gt; endpoint and specify a virtual card product for &#x60;prodId&#x60;.\&quot; } [/block]    [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;If this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See &lt;a href&#x3D;\\\&quot;ref:api-reference-enrollment-statuses\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Enrollment Statuses&lt;/a&gt; for more information.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostCreatevirtualcardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "Id2" (optional.String) - 
     * @param "IdType2" (optional.Int32) - 
     * @param "Locale" (optional.String) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.Time) - 
     * @param "Address1" (optional.String) - 
     * @param "Address2" (optional.String) - 
     * @param "Address3" (optional.String) - 
     * @param "Address4" (optional.String) - 
     * @param "Address5" (optional.String) - 
     * @param "City" (optional.String) - 
     * @param "State" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "CountryCode" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "MobileCarrierId" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "WebUid" (optional.String) - 
     * @param "WebPwd" (optional.String) - 
     * @param "SecretQuestion" (optional.String) - 
     * @param "SecretAnswer" (optional.String) - 
     * @param "LoadAmount" (optional.Float32) - 
     * @param "LoadType" (optional.String) - 
     * @param "ExternalAccountId" (optional.String) - 
     * @param "PrimaryAccount" (optional.String) - 
     * @param "SharedBalance" (optional.Int32) - 
     * @param "UserData" (optional.String) - 
     * @param "VerifyOnly" (optional.Int32) - 
     * @param "LoadFromAccountNo" (optional.String) - 
     * @param "SweepDate" (optional.Time) - 
     * @param "CreditLimit" (optional.Float64) - 
     * @param "SingleUse" (optional.String) - 
     * @param "BusinessName" (optional.String) - 
     * @param "MobilePhoneCountryCode" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault42
*/

type AccountsAndCardsApiPostCreatevirtualcardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    ProdId optional.Int32
    Id optional.String
    IdType optional.Int32
    Id2 optional.String
    IdType2 optional.Int32
    Locale optional.String
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.Time
    Address1 optional.String
    Address2 optional.String
    Address3 optional.String
    Address4 optional.String
    Address5 optional.String
    City optional.String
    State optional.String
    PostalCode optional.String
    CountryCode optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    MobileCarrierId optional.String
    Email optional.String
    WebUid optional.String
    WebPwd optional.String
    SecretQuestion optional.String
    SecretAnswer optional.String
    LoadAmount optional.Float32
    LoadType optional.String
    ExternalAccountId optional.String
    PrimaryAccount optional.String
    SharedBalance optional.Int32
    UserData optional.String
    VerifyOnly optional.Int32
    LoadFromAccountNo optional.String
    SweepDate optional.Time
    CreditLimit optional.Float64
    SingleUse optional.String
    BusinessName optional.String
    MobilePhoneCountryCode optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostCreatevirtualcard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostCreatevirtualcardOpts) (InlineResponseDefault42, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault42
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/createVirtualCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		localVarFormParams.Add("id2", parameterToString(localVarOptionals.Id2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType2.IsSet() {
		localVarFormParams.Add("idType2", parameterToString(localVarOptionals.IdType2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarFormParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarFormParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarFormParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarFormParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address4.IsSet() {
		localVarFormParams.Add("address4", parameterToString(localVarOptionals.Address4.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address5.IsSet() {
		localVarFormParams.Add("address5", parameterToString(localVarOptionals.Address5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarFormParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarFormParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarFormParams.Add("countryCode", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobileCarrierId.IsSet() {
		localVarFormParams.Add("mobileCarrierId", parameterToString(localVarOptionals.MobileCarrierId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebUid.IsSet() {
		localVarFormParams.Add("webUid", parameterToString(localVarOptionals.WebUid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebPwd.IsSet() {
		localVarFormParams.Add("webPwd", parameterToString(localVarOptionals.WebPwd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretQuestion.IsSet() {
		localVarFormParams.Add("secretQuestion", parameterToString(localVarOptionals.SecretQuestion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretAnswer.IsSet() {
		localVarFormParams.Add("secretAnswer", parameterToString(localVarOptionals.SecretAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadAmount.IsSet() {
		localVarFormParams.Add("loadAmount", parameterToString(localVarOptionals.LoadAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadType.IsSet() {
		localVarFormParams.Add("loadType", parameterToString(localVarOptionals.LoadType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExternalAccountId.IsSet() {
		localVarFormParams.Add("externalAccountId", parameterToString(localVarOptionals.ExternalAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryAccount.IsSet() {
		localVarFormParams.Add("primaryAccount", parameterToString(localVarOptionals.PrimaryAccount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SharedBalance.IsSet() {
		localVarFormParams.Add("sharedBalance", parameterToString(localVarOptionals.SharedBalance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserData.IsSet() {
		localVarFormParams.Add("userData", parameterToString(localVarOptionals.UserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VerifyOnly.IsSet() {
		localVarFormParams.Add("verifyOnly", parameterToString(localVarOptionals.VerifyOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadFromAccountNo.IsSet() {
		localVarFormParams.Add("loadFromAccountNo", parameterToString(localVarOptionals.LoadFromAccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SweepDate.IsSet() {
		localVarFormParams.Add("sweepDate", parameterToString(localVarOptionals.SweepDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditLimit.IsSet() {
		localVarFormParams.Add("creditLimit", parameterToString(localVarOptionals.CreditLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SingleUse.IsSet() {
		localVarFormParams.Add("singleUse", parameterToString(localVarOptionals.SingleUse.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessName.IsSet() {
		localVarFormParams.Add("businessName", parameterToString(localVarOptionals.BusinessName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhoneCountryCode.IsSet() {
		localVarFormParams.Add("mobilePhoneCountryCode", parameterToString(localVarOptionals.MobilePhoneCountryCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault42
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Force Pass CIP
Use the Force Pass CIP endpoint to move a customer account into &#x60;status: N&#x60; and &#x60;active: Y&#x60;. This endpoint is valid only if you are using Galileo&#x27;s &lt;&lt;glossary:CIP&gt;&gt; and you verify customer documents when the customer fails CIP. Do not use this endpoint if you are using your own CIP provider or if Galileo verifies customer documents.  Consult the &lt;a href&#x3D;\&quot;doc:create-account-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating an Account&lt;/a&gt; procedure for instructions on using this endpoint, and consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for how to use this endpoint with Galileo&#x27;s integrated CIP solution.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostForcepasscipOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostForcepasscipOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostForcepasscip(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostForcepasscipOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/forcePassCip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Access Token
Use the Get Access Token endpoint to retrieve an access token for a card, account, or customer record. The expiry in seconds (default: 300) and usage count (default: 3) for the access token are configurable using the TSECV (seconds) and TUSEC (usage) parameters.  When &#x60;type: 0&#x60; always use CAD for &#x60;accountNo&#x60;.  Use this endpoint to send a customer a link to a one-time view of a dynamically generated image of a virtual card via HTTP, for example, or for other purposes as appropriate.  Consult &lt;a href&#x3D;\&quot;doc:retrieving-card-information#digital-card-images\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Digital card images&lt;/a&gt; in the *Retrieving Card Information* guide for more information. For other uses contact Galileo.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetaccesstokenOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "Type_" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault19
*/

type AccountsAndCardsApiPostGetaccesstokenOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    Type_ optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetaccesstoken(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetaccesstokenOpts) (InlineResponseDefault19, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault19
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getAccessToken"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarFormParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault19
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Account by ID
Use the Get Account by ID endpoint to retrieve account information by customer IDs (&#x60;id&#x60; or &#x60;id2&#x60; parameter) such as SSN or driver license number, depending on which ID types your program supports.  This endpoint returns customer data such as enrollment status and onboarding date as well as a list of all accounts associated with the customer.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetaccountbyidOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault56
*/

type AccountsAndCardsApiPostGetaccountbyidOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    Id optional.String
    IdType optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetaccountbyid(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetaccountbyidOpts) (InlineResponseDefault56, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault56
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getAccountById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault56
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Account Cards
Use the Get Account Cards endpoint to retrieve a customer&#x27;s profile information along with all accounts and cards that are associated with that customer, regardless of status.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;You can receive PCI-sensitive information only if your provider parameters permit it.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetaccountcardsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "IncludeRelated" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault5
*/

type AccountsAndCardsApiPostGetaccountcardsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    IncludeRelated optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetaccountcards(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetaccountcardsOpts) (InlineResponseDefault5, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault5
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getAccountCards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeRelated.IsSet() {
		localVarFormParams.Add("includeRelated", parameterToString(localVarOptionals.IncludeRelated.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault5
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Account Features
Use the Get Account Features endpoint to retrieve the account features that are set for the specified customer account.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetaccountfeaturesOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault45
*/

type AccountsAndCardsApiPostGetaccountfeaturesOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetaccountfeatures(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetaccountfeaturesOpts) (InlineResponseDefault45, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault45
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getAccountFeatures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault45
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Balance
Use the Get Balance endpoint to retrieve the specified account balance and its currency code. This endpoint returns the balance for all accounts that share the same balance ID (Galileo account number).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetbalanceOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault1
*/

type AccountsAndCardsApiPostGetbalanceOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetbalance(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetbalanceOpts) (InlineResponseDefault1, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault1
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getBalance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault1
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Card
Use the Get Card endpoint to retrieve information for the specified card.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;You can receive PCI-sensitive information only if your provider parameters permit it.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetcardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault18
*/

type AccountsAndCardsApiPostGetcardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetcard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetcardOpts) (InlineResponseDefault18, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault18
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault18
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Card PIN-Change Key
Use the Get Card PIN-Change Key endpoint to retrieve a PIN-change token. Use the token as part of a PIN-change strategy wherein the cardholder submits a PIN change request via a form that either you or Galileo host.  Consult the &lt;a href&#x3D;\&quot;doc:direct-post-pin-set-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Direct POST PIN-Set Procedure&lt;/a&gt; or the &lt;a href&#x3D;\&quot;doc:direct-render-pin-set-procedure\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Direct Render PIN-Set Procedure&lt;/a&gt; for instructions on using this endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetcardpinchangekeyOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault68
*/

type AccountsAndCardsApiPostGetcardpinchangekeyOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetcardpinchangekey(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetcardpinchangekeyOpts) (InlineResponseDefault68, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault68
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getCardPinChangeKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault68
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Customer Note History
Use the Get Customer Note History endpoint to retrieve the customer notes that are in the Galileo &lt;&lt;glossary:CST&gt;&gt;. This endpoint requires a date range: 365 days maximum.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetcustomernotehistoryOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "StartDate" (optional.String) - 
     * @param "EndDate" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault48
*/

type AccountsAndCardsApiPostGetcustomernotehistoryOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    StartDate optional.String
    EndDate optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetcustomernotehistory(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetcustomernotehistoryOpts) (InlineResponseDefault48, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault48
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getCustomerNoteHistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarFormParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarFormParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault48
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Enrollment Info
Use Get Enrollment Info to get the customer data that was submitted with &lt;a href&#x3D;\&quot;ref:post_startenrollment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Start Enrollment&lt;/a&gt; or with a &lt;a href&#x3D;\&quot;ref:post_createaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account&lt;/a&gt; call that passed &#x60;cipStatus: 1&#x60; (send customer profile to &lt;&lt;glossary:CIP&gt;&gt; but do not create account). The endpoint returns customer data and any CIP-related information.  Pass the &#x60;transactionId&#x60; from the original Start Enrollment or Create Account call. No other parameters except the base form parameters are required.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetenrollmentinfoOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault36
*/

type AccountsAndCardsApiPostGetenrollmentinfoOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetenrollmentinfo(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetenrollmentinfoOpts) (InlineResponseDefault36, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault36
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getEnrollmentInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault36
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Interest
Use the Get Interest endpoint to retrieve accrual interest, interest year-to-date, and annual percentage yield for any type of interest bearing account (savings or non-savings). The Get Interest endpoint is the preferred method for retrieving data on interest bearing accounts.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetinterestOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "InterestMonth" (optional.String) - 
     * @param "IncludeRelated" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault30
*/

type AccountsAndCardsApiPostGetinterestOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    InterestMonth optional.String
    IncludeRelated optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetinterest(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetinterestOpts) (InlineResponseDefault30, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault30
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getInterest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InterestMonth.IsSet() {
		localVarFormParams.Add("interestMonth", parameterToString(localVarOptionals.InterestMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeRelated.IsSet() {
		localVarFormParams.Add("includeRelated", parameterToString(localVarOptionals.IncludeRelated.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault30
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Related Accounts
Use the Get Related Accounts endpoint to retrieve all accounts that are related to the account specified in &#x60;accountNo&#x60;. This endpoint returns all accounts with the same owner. If a secondary account is passed, it returns the primary account and other secondaries associated with the same primary.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetrelatedaccountsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault57
*/

type AccountsAndCardsApiPostGetrelatedaccountsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetrelatedaccounts(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetrelatedaccountsOpts) (InlineResponseDefault57, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault57
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getRelatedAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault57
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Roundup Accounts
Use the Get Roundup Accounts endpoint to retrieve a record of all accounts linked to a roundup account and the contribution percentage from each account.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetroundupaccountsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault62
*/

type AccountsAndCardsApiPostGetroundupaccountsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetroundupaccounts(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetroundupaccountsOpts) (InlineResponseDefault62, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault62
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getRoundupAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault62
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get RTF Account Relationship
Use the Get &lt;&lt;glossary:RTF&gt;&gt; Account Relationship endpoint to retrieve either the RTF spending accounts that are associated with an RTF funding account, or the RTF funding account that is associated with an RTF spending account.  For instructions on using this endpoint see &lt;a href&#x3D;\&quot;doc:creating-real-time-funding-accounts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating Real-Time Funding Accounts&lt;/a&gt;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetrtfaccountrelationshipOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "Page" (optional.Int32) - 
     * @param "RecordCnt" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault66
*/

type AccountsAndCardsApiPostGetrtfaccountrelationshipOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    Page optional.Int32
    RecordCnt optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetrtfaccountrelationship(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetrtfaccountrelationshipOpts) (InlineResponseDefault66, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault66
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getRtfAccountRelationship"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarFormParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecordCnt.IsSet() {
		localVarFormParams.Add("recordCnt", parameterToString(localVarOptionals.RecordCnt.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault66
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get Savings Interest
Use the Get Savings Interest endpoint to retrieve accrual interest, interest year-to-date, and annual percentage yield earnedfor a savings account.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetsavingsinterestOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "StartDate" (optional.String) - 
     * @param "EndDate" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault29
*/

type AccountsAndCardsApiPostGetsavingsinterestOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    StartDate optional.String
    EndDate optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetsavingsinterest(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetsavingsinterestOpts) (InlineResponseDefault29, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault29
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getSavingsInterest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarFormParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarFormParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault29
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Get User-Defined Account Fields
Use the Get User-Defined Account Fields endpoint to retrieve the user-defined fields and values that were created with the &lt;a href&#x3D;\&quot;ref:post_setuserdefinedaccountfield\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Set User-Defined Account Field&lt;/a&gt; endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostGetuserdefinedaccountfieldsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault55
*/

type AccountsAndCardsApiPostGetuserdefinedaccountfieldsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostGetuserdefinedaccountfields(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostGetuserdefinedaccountfieldsOpts) (InlineResponseDefault55, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault55
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getUserDefinedAccountFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault55
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Modify Status
Use the Modify Status endpoint to change the status of an account, a card, or both. This endpoint does not change any other kind of status.  Consult the &lt;a href&#x3D;\&quot;ref:api-reference-modify-status-types\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Account and card status table&lt;/a&gt; to see what is affected by each &#x60;type&#x60; value. When activating a card, use this endpoint to activate a virtual card, but use the &lt;a href&#x3D;\&quot;ref:post_activatecard\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Activate Card&lt;/a&gt; endpoint for physical cards.  See the &lt;a href&#x3D;\&quot;doc:lost-stolen-or-damaged-cards\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Lost, Stolen, or Damaged Cards&lt;/a&gt; guide for instructions on using types &#x60;3&#x60;, &#x60;4&#x60;, &#x60;7&#x60;, &#x60;8&#x60;, and &#x60;12&#x60;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostModifystatusOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "Type_" (optional.Int32) - 
     * @param "StartDate" (optional.Time) - 
     * @param "EndDate" (optional.Time) - 
     * @param "BypassRepFee" (optional.String) - 
     * @param "CardNumberLastFour" (optional.String) - 
     * @param "ClosureReason" (optional.String) - 
     * @param "BypassMailFee" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault6
*/

type AccountsAndCardsApiPostModifystatusOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    Type_ optional.Int32
    StartDate optional.Time
    EndDate optional.Time
    BypassRepFee optional.String
    CardNumberLastFour optional.String
    ClosureReason optional.String
    BypassMailFee optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostModifystatus(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostModifystatusOpts) (InlineResponseDefault6, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault6
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/modifyStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarFormParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarFormParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarFormParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BypassRepFee.IsSet() {
		localVarFormParams.Add("bypassRepFee", parameterToString(localVarOptionals.BypassRepFee.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardNumberLastFour.IsSet() {
		localVarFormParams.Add("cardNumberLastFour", parameterToString(localVarOptionals.CardNumberLastFour.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClosureReason.IsSet() {
		localVarFormParams.Add("closureReason", parameterToString(localVarOptionals.ClosureReason.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BypassMailFee.IsSet() {
		localVarFormParams.Add("bypassMailFee", parameterToString(localVarOptionals.BypassMailFee.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault6
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Recover Charged-Off Account
Use the Recover Charged-Off Account endpoint to change a charged-off account (&#x60;status: R&#x60;) to another status (active or canceled without refund) and to restore the account balance. Using this endpoint is valid only when there was an outstanding positive balance at the time of charge-off.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostRecoverchargedoffaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ChargeOffRecoveryAmt" (optional.Float32) - 
     * @param "NewAccountStatus" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostRecoverchargedoffaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ChargeOffRecoveryAmt optional.Float32
    NewAccountStatus optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostRecoverchargedoffaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostRecoverchargedoffaccountOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recoverChargedOffAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChargeOffRecoveryAmt.IsSet() {
		localVarFormParams.Add("chargeOffRecoveryAmt", parameterToString(localVarOptionals.ChargeOffRecoveryAmt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewAccountStatus.IsSet() {
		localVarFormParams.Add("newAccountStatus", parameterToString(localVarOptionals.NewAccountStatus.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Reissue Card
Use the Reissue Card endpoint to reissue a card, which means to send the card to the embosser again. Specify whether to keep the same &lt;&lt;glossary:PAN&gt;&gt; and expiry date as the original card. This endpoint also changes the status of the original card.  Galileo recommends that you use the &lt;&lt;glossary:CAD&gt;&gt; for &#x60;accountNo&#x60;; however, you can use the &lt;&lt;glossary:PRN&gt;&gt; if only one card has ever been associated with the account.  Galileo recommends that you use this endpoint instead of Modify Status with &#x60;type: 12&#x60; to reissue cards. For instructions see the &lt;a href&#x3D;\&quot;doc:reissuing-cards\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Reissuing Cards&lt;/a&gt; guide.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;The &#x60;expiry_date&#x60; and &#x60;card_security_code&#x60; (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process. Call &lt;a href&#x3D;\\\&quot;ref:post_getcard\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Get Card&lt;/a&gt; to retrieve the new values after the emboss process has run.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostReissuecardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "NewPan" (optional.String) - 
     * @param "NewExpiryDate" (optional.String) - 
     * @param "Emboss" (optional.String) - 
     * @param "OldCardStatus" (optional.String) - 
     * @param "BypassMailFee" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault70
*/

type AccountsAndCardsApiPostReissuecardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    NewPan optional.String
    NewExpiryDate optional.String
    Emboss optional.String
    OldCardStatus optional.String
    BypassMailFee optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostReissuecard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostReissuecardOpts) (InlineResponseDefault70, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault70
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reissueCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewPan.IsSet() {
		localVarFormParams.Add("newPan", parameterToString(localVarOptionals.NewPan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewExpiryDate.IsSet() {
		localVarFormParams.Add("newExpiryDate", parameterToString(localVarOptionals.NewExpiryDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Emboss.IsSet() {
		localVarFormParams.Add("emboss", parameterToString(localVarOptionals.Emboss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OldCardStatus.IsSet() {
		localVarFormParams.Add("oldCardStatus", parameterToString(localVarOptionals.OldCardStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BypassMailFee.IsSet() {
		localVarFormParams.Add("bypassMailFee", parameterToString(localVarOptionals.BypassMailFee.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault70
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Reset Card PIN-Fail Count
Use the Reset Card PIN-Fail Count endpoint to move the cardholder&#x27;s PIN-failure count to zero. Optionally, you can also notate the customer account. You can retrieve the current PIN-fail count and fail date with the &lt;a href&#x3D;\&quot;ref:post_getcard\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Get Card&lt;/a&gt; or &lt;a href&#x3D;\&quot;ref:post_getaccountcard\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Get Account Card&lt;/a&gt; endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostResetcardpinfailcountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "Notate" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostResetcardpinfailcountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    Notate optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostResetcardpinfailcount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostResetcardpinfailcountOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resetCardPinFailCount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notate.IsSet() {
		localVarFormParams.Add("notate", parameterToString(localVarOptionals.Notate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Run CIP
Use the Run CIP endpoint to run the Galileo &lt;&lt;glossary:CIP&gt;&gt; process on a customer who has already been enrolled. Do not use this endpoint if you are using your own CIP provider.  Consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for how to use this endpoint with Galileo&#x27;s integrated CIP solution.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostRuncipOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault41
*/

type AccountsAndCardsApiPostRuncipOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostRuncip(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostRuncipOpts) (InlineResponseDefault41, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault41
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/runCip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault41
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Run Enrollment CIP
Use the Run Enrollment CIP endpoint to run or re-run the &lt;&lt;glossary:CIP&gt;&gt; process on an existing customer. Consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for instructions on using this endpoint with Galileo&#x27;s integrated CIP solution.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;Validation on an SSN is limited to a length check.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostRunenrollmentcipOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault40
*/

type AccountsAndCardsApiPostRunenrollmentcipOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    Id optional.String
    IdType optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostRunenrollmentcip(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostRunenrollmentcipOpts) (InlineResponseDefault40, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault40
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/runEnrollmentCip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault40
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Search Accounts
Use the Search Accounts endpoint to find a customer account by searching on at least one of the parameters. The data in the response is similar to what the Galileo &lt;&lt;glossary:CST&gt;&gt; search provides.  For the &#x60;recordCnt&#x60; parameter use these values to get the desired number of records per page: * **No value** &amp;mdash; 50 records per page * **&#x60;1&#x60; through &#x60;100&#x60;** &amp;mdash; The specified number of records per page * **Values over &#x60;100&#x60;** &amp;mdash; 100 records per page 
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostSearchaccountsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "UserData" (optional.String) - 
     * @param "Eextid" (optional.String) - 
     * @param "RecordCnt" (optional.Int32) - 
     * @param "Page" (optional.Int32) - 
     * @param "MobilePhoneCountryCode" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault58
*/

type AccountsAndCardsApiPostSearchaccountsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.String
    PostalCode optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    Email optional.String
    UserData optional.String
    Eextid optional.String
    RecordCnt optional.Int32
    Page optional.Int32
    MobilePhoneCountryCode optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostSearchaccounts(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostSearchaccountsOpts) (InlineResponseDefault58, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault58
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/searchAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserData.IsSet() {
		localVarFormParams.Add("userData", parameterToString(localVarOptionals.UserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Eextid.IsSet() {
		localVarFormParams.Add("eextid", parameterToString(localVarOptionals.Eextid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecordCnt.IsSet() {
		localVarFormParams.Add("recordCnt", parameterToString(localVarOptionals.RecordCnt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarFormParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhoneCountryCode.IsSet() {
		localVarFormParams.Add("mobilePhoneCountryCode", parameterToString(localVarOptionals.MobilePhoneCountryCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault58
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Set Account Feature
Use the Set Account Feature endpoint to set or modify specified attributes of a customer account. * When enabling and disabling fraud rules (&#x60;featureType: 14&#x60;), keep in mind that if you pass &#x60;featureValue: Y&#x60; and do not pass &#x60;endDate&#x60;, the end date is set to 3000-01-01, meaning that fraud rules are suspended indefinitely. To update the timespan for fraud-rule suspension, pass &#x60;featureValue: Y&#x60; and the new start and/or end date-times. To immediately re-enable fraud rules, pass &#x60;featureValue: N&#x60;. When &#x60;featureValue: N&#x60;, the date fields are ignored. * When you change account features 20, 21 or 22, you can arrange with Galileo to receive the &lt;a href&#x3D;\&quot;ref:api-reference-events-api-account-feature-change\&quot; target&#x3D;\&quot;_blank\&quot;&gt;&#x60;ACFC: account_feature_change&#x60;&lt;/a&gt; event message. [block:callout] { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;Feature types 20, 21, and 22 are mutually exclusive. Only one can be set to &#x60;Y&#x60; at a time.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostSetaccountfeatureOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "FeatureType" (optional.Int32) - 
     * @param "FeatureValue" (optional.String) - 
     * @param "StartDate" (optional.Time) - 
     * @param "EndDate" (optional.Time) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault46
*/

type AccountsAndCardsApiPostSetaccountfeatureOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    FeatureType optional.Int32
    FeatureValue optional.String
    StartDate optional.Time
    EndDate optional.Time
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostSetaccountfeature(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostSetaccountfeatureOpts) (InlineResponseDefault46, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault46
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/setAccountFeature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FeatureType.IsSet() {
		localVarFormParams.Add("featureType", parameterToString(localVarOptionals.FeatureType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FeatureValue.IsSet() {
		localVarFormParams.Add("featureValue", parameterToString(localVarOptionals.FeatureValue.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarFormParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarFormParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault46
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Set Roundup Accounts
Use the Set Roundup Accounts endpoint to specify the roundup account for a consumer account, such as rounding up into a charity account. (To enable roundup for the account, call &lt;a href&#x3D;\&quot;ref:post_setaccountfeature\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Set Account Feature&lt;/a&gt; with &#x60;type: 11&#x60;.) You can assign multiple roundup accounts to a single consumer account. The total percentage from all linked roundup accounts must equal 100.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostSetroundupaccountsOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "LinkedAccounts" (optional.String) - 
     * @param "Expire" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault62
*/

type AccountsAndCardsApiPostSetroundupaccountsOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    LinkedAccounts optional.String
    Expire optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostSetroundupaccounts(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostSetroundupaccountsOpts) (InlineResponseDefault62, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault62
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/setRoundupAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LinkedAccounts.IsSet() {
		localVarFormParams.Add("linkedAccounts", parameterToString(localVarOptionals.LinkedAccounts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Expire.IsSet() {
		localVarFormParams.Add("expire", parameterToString(localVarOptionals.Expire.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault62
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Set User-Defined Account Field
Use the Set User-Defined Account Field endpoint to create or update custom data elements on an account. There is no technical limit on the number of fields that you can add. These fields are visible in the &lt;&lt;glossary:CST&gt;&gt;.  * &#x60;fieldId&#x60; &amp;mdash; Provide an identifier for the field. This identifier needs to be unique only to the account. * &#x60;fieldValue&#x60; &amp;mdash; Provide the value for that field.  These fields are visible in the &lt;&lt;glossary:CST&gt;&gt; in the **Account** tab.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostSetuserdefinedaccountfieldOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "FieldId" (optional.String) - 
     * @param "FieldValue" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault54
*/

type AccountsAndCardsApiPostSetuserdefinedaccountfieldOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    FieldId optional.String
    FieldValue optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostSetuserdefinedaccountfield(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostSetuserdefinedaccountfieldOpts) (InlineResponseDefault54, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault54
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/setUserDefinedAccountField"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FieldId.IsSet() {
		localVarFormParams.Add("fieldId", parameterToString(localVarOptionals.FieldId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FieldValue.IsSet() {
		localVarFormParams.Add("fieldValue", parameterToString(localVarOptionals.FieldValue.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault54
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Start Enrollment
Use the Start Enrollment endpoint to initiate a new enrollment, run &lt;&lt;glossary:CIP&gt;&gt;, and calculate credit limit, in the case of a credit product. This endpoint is different from &lt;a href&#x3D;\&quot;ref:post_createaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account&lt;/a&gt; in that it creates a customer record but does not create an account or card.  Consult the &lt;a href&#x3D;\&quot;doc:customer-id-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Customer ID Verification&lt;/a&gt; guide for instructions on using this endpoint with Galileo&#x27;s integrated CIP solution.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;If this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See &lt;a href&#x3D;\\\&quot;ref:api-reference-enrollment-statuses\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Enrollment Statuses&lt;/a&gt; for more information.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostStartenrollmentOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "Id2" (optional.String) - 
     * @param "IdType2" (optional.Int32) - 
     * @param "Location" (optional.String) - 
     * @param "LocationType" (optional.Int32) - 
     * @param "Locale" (optional.String) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.Time) - 
     * @param "Address1" (optional.String) - 
     * @param "Address2" (optional.String) - 
     * @param "Address3" (optional.String) - 
     * @param "Address4" (optional.String) - 
     * @param "Address5" (optional.String) - 
     * @param "City" (optional.String) - 
     * @param "State" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "CountryCode" (optional.String) - 
     * @param "ExpressMail" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "MobileCarrierId" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "WebUid" (optional.String) - 
     * @param "WebPwd" (optional.String) - 
     * @param "SecretQuestion" (optional.String) - 
     * @param "SecretAnswer" (optional.String) - 
     * @param "UserData" (optional.String) - 
     * @param "VerifyOnly" (optional.Int32) - 
     * @param "MonthlyIncome" (optional.Float32) - 
     * @param "MonthlyLiab" (optional.Float32) - 
     * @param "RunCip" (optional.Int32) - 
     * @param "BusinessName" (optional.String) - 
     * @param "MobilePhoneCountryCode" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault35
*/

type AccountsAndCardsApiPostStartenrollmentOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    ProdId optional.Int32
    Id optional.String
    IdType optional.Int32
    Id2 optional.String
    IdType2 optional.Int32
    Location optional.String
    LocationType optional.Int32
    Locale optional.String
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.Time
    Address1 optional.String
    Address2 optional.String
    Address3 optional.String
    Address4 optional.String
    Address5 optional.String
    City optional.String
    State optional.String
    PostalCode optional.String
    CountryCode optional.String
    ExpressMail optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    MobileCarrierId optional.String
    Email optional.String
    WebUid optional.String
    WebPwd optional.String
    SecretQuestion optional.String
    SecretAnswer optional.String
    UserData optional.String
    VerifyOnly optional.Int32
    MonthlyIncome optional.Float32
    MonthlyLiab optional.Float32
    RunCip optional.Int32
    BusinessName optional.String
    MobilePhoneCountryCode optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostStartenrollment(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostStartenrollmentOpts) (InlineResponseDefault35, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault35
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/startEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		localVarFormParams.Add("id2", parameterToString(localVarOptionals.Id2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType2.IsSet() {
		localVarFormParams.Add("idType2", parameterToString(localVarOptionals.IdType2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationType.IsSet() {
		localVarFormParams.Add("locationType", parameterToString(localVarOptionals.LocationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarFormParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarFormParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarFormParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarFormParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address4.IsSet() {
		localVarFormParams.Add("address4", parameterToString(localVarOptionals.Address4.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address5.IsSet() {
		localVarFormParams.Add("address5", parameterToString(localVarOptionals.Address5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarFormParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarFormParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarFormParams.Add("countryCode", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpressMail.IsSet() {
		localVarFormParams.Add("expressMail", parameterToString(localVarOptionals.ExpressMail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobileCarrierId.IsSet() {
		localVarFormParams.Add("mobileCarrierId", parameterToString(localVarOptionals.MobileCarrierId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebUid.IsSet() {
		localVarFormParams.Add("webUid", parameterToString(localVarOptionals.WebUid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebPwd.IsSet() {
		localVarFormParams.Add("webPwd", parameterToString(localVarOptionals.WebPwd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretQuestion.IsSet() {
		localVarFormParams.Add("secretQuestion", parameterToString(localVarOptionals.SecretQuestion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretAnswer.IsSet() {
		localVarFormParams.Add("secretAnswer", parameterToString(localVarOptionals.SecretAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserData.IsSet() {
		localVarFormParams.Add("userData", parameterToString(localVarOptionals.UserData.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VerifyOnly.IsSet() {
		localVarFormParams.Add("verifyOnly", parameterToString(localVarOptionals.VerifyOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonthlyIncome.IsSet() {
		localVarFormParams.Add("monthlyIncome", parameterToString(localVarOptionals.MonthlyIncome.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonthlyLiab.IsSet() {
		localVarFormParams.Add("monthlyLiab", parameterToString(localVarOptionals.MonthlyLiab.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RunCip.IsSet() {
		localVarFormParams.Add("runCip", parameterToString(localVarOptionals.RunCip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessName.IsSet() {
		localVarFormParams.Add("businessName", parameterToString(localVarOptionals.BusinessName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhoneCountryCode.IsSet() {
		localVarFormParams.Add("mobilePhoneCountryCode", parameterToString(localVarOptionals.MobilePhoneCountryCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault35
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Switch Product
Use the Switch Product endpoint to change the product ID on the specified account to a new product ID. To control whether the product switch triggers a card reissue, set &#x60;doReissue&#x60;.   Galileo recommends that you use the &lt;&lt;glossary:CAD&gt;&gt; for &#x60;accountNo&#x60;; however, you can use the &lt;&lt;glossary:PRN&gt;&gt; if only one card has ever been associated with the account.  For &#x60;prodId&#x60; pass the new product ID.   Galileo recommends that you use this endpoint instead of Set Account Feature with &#x60;type: 3&#x60; to switch products. For instructions see the &lt;a href&#x3D;\&quot;doc:switching-products\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Switching Products&lt;/a&gt; guide.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;The &#x60;expiry_date&#x60; and &#x60;card_security_code&#x60; (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process. Call &lt;a href&#x3D;\\\&quot;ref:post_getcard\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Get Card&lt;/a&gt; to retrieve the new values after the emboss process has run.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostSwitchproductOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "DoReissue" (optional.String) - 
     * @param "NewPan" (optional.String) - 
     * @param "NewExpiryDate" (optional.String) - 
     * @param "Emboss" (optional.String) - 
     * @param "OldCardStatus" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault61
*/

type AccountsAndCardsApiPostSwitchproductOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ProdId optional.Int32
    DoReissue optional.String
    NewPan optional.String
    NewExpiryDate optional.String
    Emboss optional.String
    OldCardStatus optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostSwitchproduct(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostSwitchproductOpts) (InlineResponseDefault61, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault61
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/switchProduct"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DoReissue.IsSet() {
		localVarFormParams.Add("doReissue", parameterToString(localVarOptionals.DoReissue.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewPan.IsSet() {
		localVarFormParams.Add("newPan", parameterToString(localVarOptionals.NewPan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NewExpiryDate.IsSet() {
		localVarFormParams.Add("newExpiryDate", parameterToString(localVarOptionals.NewExpiryDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Emboss.IsSet() {
		localVarFormParams.Add("emboss", parameterToString(localVarOptionals.Emboss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OldCardStatus.IsSet() {
		localVarFormParams.Add("oldCardStatus", parameterToString(localVarOptionals.OldCardStatus.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault61
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Update Account
Use the Update Account endpoint to modify customer profile information in an existing customer record. Pass only the parameters to modify &amp;mdash; other parameters should be left blank. Only active accounts (&#x60;status: N&#x60;) can be updated using this endpoint.  #### Nullifying data elements Pass the string &#x60;null&#x60; for any of these parameters to update that value to &#x60;null&#x60;.  |   |   |   |   | |:--|:--|:--|:--| | &#x60;firstName&#x60; | &#x60;middleName&#x60; | &#x60;lastName&#x60; | &#x60;address1&#x60; | | &#x60;city&#x60; | &#x60;state&#x60; | &#x60;postalCode&#x60; | &#x60;primaryPhone&#x60; | | &#x60;otherPhone&#x60; | &#x60;mobilePhone&#x60; | &#x60;shipToAddress1&#x60; | &#x60;webUid&#x60; | | &#x60;secretQuestion&#x60; | &#x60;secretAnswer&#x60; | &#x60;mailBounced&#x60; | &#x60;email&#x60;\\* | | &#x60;embossLine2&#x60; |  |  | | \\*Only if the provider parameter AENUL permits it.  [block:callout]  { \&quot;type\&quot;: \&quot;warning\&quot;, \&quot;title\&quot;: \&quot;Warning\&quot;, \&quot;body\&quot;: \&quot;Exercise caution when nullifying a primary address &amp;mdash; for compliance in the United States you must maintain a physical address as an individual cardholder&#x27;s primary address.\&quot; } [/block]  #### Updating customer ID When you are using Galileo&#x27;s integrated CIP process, you can update the primary customer ID (&#x60;id&#x60; and &#x60;idType&#x60;) as long as the customer has not passed &lt;&lt;glossary:CIP&gt;&gt;. If the customer has already passed CIP, status code 415-02 is returned. Secondary customer ID (&#x60;id2&#x60; and &#x60;idType2&#x60;) can be updated regardless of customer CIP status.  #### Updating the ship-to address When updating the ship-to address for a customer, the elements &#x60;shipToAddress1&#x60;, &#x60;shipToCity&#x60;, &#x60;shipToState&#x60;, and &#x60;shipToPostalCode&#x60; are required &amp;ndash; &#x60;shipToAddress2&#x60; is optional. You can retrieve the current customer ship-to address data using the &lt;a href&#x3D;\&quot;ref:post_getaccountcard\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Get Account Card&lt;/a&gt; endpoint.  By default, the embosser sends the card to the primary address. To ship to a different address than the primary, use the ship-to address fields. If you pass &#x60;shipToAddressPermanent: 1&#x60; the embosser will always send cards to the ship-to address; otherwise, the ship-to address is used only for the current order.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostUpdateaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "Id" (optional.String) - 
     * @param "IdType2" (optional.Int32) - 
     * @param "Id2" (optional.String) - 
     * @param "LocationType" (optional.Int32) - 
     * @param "Location" (optional.String) - 
     * @param "Locale" (optional.String) - 
     * @param "ExternalAccountId" (optional.String) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.Time) - 
     * @param "Address1" (optional.String) - 
     * @param "Address2" (optional.String) - 
     * @param "Address3" (optional.String) - 
     * @param "Address4" (optional.String) - 
     * @param "Address5" (optional.String) - 
     * @param "City" (optional.String) - 
     * @param "State" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "CountryCode" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "MobileCarrierId" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "WebUid" (optional.String) - 
     * @param "WebPwd" (optional.String) - 
     * @param "SecretQuestion" (optional.String) - 
     * @param "SecretAnswer" (optional.String) - 
     * @param "IncomeSource" (optional.String) - 
     * @param "Occupation" (optional.String) - 
     * @param "MailBounced" (optional.String) - 
     * @param "ShipToAddress1" (optional.String) - 
     * @param "ShipToAddress2" (optional.String) - 
     * @param "ShipToCity" (optional.String) - 
     * @param "ShipToState" (optional.String) - 
     * @param "ShipToPostalCode" (optional.String) - 
     * @param "ShipToCountryCode" (optional.String) - 
     * @param "ShipToAddressPermanent" (optional.String) - 
     * @param "EmbossLine2" (optional.String) - 
     * @param "BusinessName" (optional.String) - 
     * @param "MobilePhoneCountryCode" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault8
*/

type AccountsAndCardsApiPostUpdateaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    IdType optional.Int32
    Id optional.String
    IdType2 optional.Int32
    Id2 optional.String
    LocationType optional.Int32
    Location optional.String
    Locale optional.String
    ExternalAccountId optional.String
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.Time
    Address1 optional.String
    Address2 optional.String
    Address3 optional.String
    Address4 optional.String
    Address5 optional.String
    City optional.String
    State optional.String
    PostalCode optional.String
    CountryCode optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    MobileCarrierId optional.String
    Email optional.String
    WebUid optional.String
    WebPwd optional.String
    SecretQuestion optional.String
    SecretAnswer optional.String
    IncomeSource optional.String
    Occupation optional.String
    MailBounced optional.String
    ShipToAddress1 optional.String
    ShipToAddress2 optional.String
    ShipToCity optional.String
    ShipToState optional.String
    ShipToPostalCode optional.String
    ShipToCountryCode optional.String
    ShipToAddressPermanent optional.String
    EmbossLine2 optional.String
    BusinessName optional.String
    MobilePhoneCountryCode optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostUpdateaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostUpdateaccountOpts) (InlineResponseDefault8, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault8
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/updateAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType2.IsSet() {
		localVarFormParams.Add("idType2", parameterToString(localVarOptionals.IdType2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		localVarFormParams.Add("id2", parameterToString(localVarOptionals.Id2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LocationType.IsSet() {
		localVarFormParams.Add("locationType", parameterToString(localVarOptionals.LocationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarFormParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExternalAccountId.IsSet() {
		localVarFormParams.Add("externalAccountId", parameterToString(localVarOptionals.ExternalAccountId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarFormParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarFormParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarFormParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address4.IsSet() {
		localVarFormParams.Add("address4", parameterToString(localVarOptionals.Address4.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address5.IsSet() {
		localVarFormParams.Add("address5", parameterToString(localVarOptionals.Address5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarFormParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarFormParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarFormParams.Add("countryCode", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobileCarrierId.IsSet() {
		localVarFormParams.Add("mobileCarrierId", parameterToString(localVarOptionals.MobileCarrierId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebUid.IsSet() {
		localVarFormParams.Add("webUid", parameterToString(localVarOptionals.WebUid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebPwd.IsSet() {
		localVarFormParams.Add("webPwd", parameterToString(localVarOptionals.WebPwd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretQuestion.IsSet() {
		localVarFormParams.Add("secretQuestion", parameterToString(localVarOptionals.SecretQuestion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretAnswer.IsSet() {
		localVarFormParams.Add("secretAnswer", parameterToString(localVarOptionals.SecretAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncomeSource.IsSet() {
		localVarFormParams.Add("incomeSource", parameterToString(localVarOptionals.IncomeSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Occupation.IsSet() {
		localVarFormParams.Add("occupation", parameterToString(localVarOptionals.Occupation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MailBounced.IsSet() {
		localVarFormParams.Add("mailBounced", parameterToString(localVarOptionals.MailBounced.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddress1.IsSet() {
		localVarFormParams.Add("shipToAddress1", parameterToString(localVarOptionals.ShipToAddress1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddress2.IsSet() {
		localVarFormParams.Add("shipToAddress2", parameterToString(localVarOptionals.ShipToAddress2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToCity.IsSet() {
		localVarFormParams.Add("shipToCity", parameterToString(localVarOptionals.ShipToCity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToState.IsSet() {
		localVarFormParams.Add("shipToState", parameterToString(localVarOptionals.ShipToState.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToPostalCode.IsSet() {
		localVarFormParams.Add("shipToPostalCode", parameterToString(localVarOptionals.ShipToPostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToCountryCode.IsSet() {
		localVarFormParams.Add("shipToCountryCode", parameterToString(localVarOptionals.ShipToCountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipToAddressPermanent.IsSet() {
		localVarFormParams.Add("shipToAddressPermanent", parameterToString(localVarOptionals.ShipToAddressPermanent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EmbossLine2.IsSet() {
		localVarFormParams.Add("embossLine2", parameterToString(localVarOptionals.EmbossLine2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessName.IsSet() {
		localVarFormParams.Add("businessName", parameterToString(localVarOptionals.BusinessName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhoneCountryCode.IsSet() {
		localVarFormParams.Add("mobilePhoneCountryCode", parameterToString(localVarOptionals.MobilePhoneCountryCode.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault8
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Update Enrollment
Use the Update Enrollment endpoint to update customer profile information for an enrollment that was created using &lt;a href&#x3D;\&quot;ref:post_startenrollment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Start Enrollment&lt;/a&gt;.  [block:callout]  { \&quot;type\&quot;: \&quot;info\&quot;, \&quot;title\&quot;: \&quot;Note\&quot;, \&quot;body\&quot;: \&quot;Validation on an SSN is limited to a length check.\&quot; } [/block]  
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostUpdateenrollmentOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "ProdId" (optional.Int32) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "Id2" (optional.String) - 
     * @param "IdType2" (optional.Int32) - 
     * @param "FirstName" (optional.String) - 
     * @param "MiddleName" (optional.String) - 
     * @param "LastName" (optional.String) - 
     * @param "DateOfBirth" (optional.Time) - 
     * @param "Address1" (optional.String) - 
     * @param "Address2" (optional.String) - 
     * @param "Address3" (optional.String) - 
     * @param "Address4" (optional.String) - 
     * @param "Address5" (optional.String) - 
     * @param "Locale" (optional.String) - 
     * @param "City" (optional.String) - 
     * @param "State" (optional.String) - 
     * @param "PostalCode" (optional.String) - 
     * @param "CountryCode" (optional.String) - 
     * @param "PrimaryPhone" (optional.String) - 
     * @param "OtherPhone" (optional.String) - 
     * @param "MobilePhone" (optional.String) - 
     * @param "MobileCarrierId" (optional.String) - 
     * @param "Email" (optional.String) - 
     * @param "WebUid" (optional.String) - 
     * @param "WebPwd" (optional.String) - 
     * @param "SecretQuestion" (optional.String) - 
     * @param "SecretAnswer" (optional.String) - 
     * @param "MonthlyIncome" (optional.Float32) - 
     * @param "MonthlyLiab" (optional.Float32) - 
     * @param "BusinessName" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault37
*/

type AccountsAndCardsApiPostUpdateenrollmentOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    ProdId optional.Int32
    Id optional.String
    IdType optional.Int32
    Id2 optional.String
    IdType2 optional.Int32
    FirstName optional.String
    MiddleName optional.String
    LastName optional.String
    DateOfBirth optional.Time
    Address1 optional.String
    Address2 optional.String
    Address3 optional.String
    Address4 optional.String
    Address5 optional.String
    Locale optional.String
    City optional.String
    State optional.String
    PostalCode optional.String
    CountryCode optional.String
    PrimaryPhone optional.String
    OtherPhone optional.String
    MobilePhone optional.String
    MobileCarrierId optional.String
    Email optional.String
    WebUid optional.String
    WebPwd optional.String
    SecretQuestion optional.String
    SecretAnswer optional.String
    MonthlyIncome optional.Float32
    MonthlyLiab optional.Float32
    BusinessName optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostUpdateenrollment(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostUpdateenrollmentOpts) (InlineResponseDefault37, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault37
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/updateEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProdId.IsSet() {
		localVarFormParams.Add("prodId", parameterToString(localVarOptionals.ProdId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		localVarFormParams.Add("id2", parameterToString(localVarOptionals.Id2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType2.IsSet() {
		localVarFormParams.Add("idType2", parameterToString(localVarOptionals.IdType2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstName.IsSet() {
		localVarFormParams.Add("firstName", parameterToString(localVarOptionals.FirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MiddleName.IsSet() {
		localVarFormParams.Add("middleName", parameterToString(localVarOptionals.MiddleName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastName.IsSet() {
		localVarFormParams.Add("lastName", parameterToString(localVarOptionals.LastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateOfBirth.IsSet() {
		localVarFormParams.Add("dateOfBirth", parameterToString(localVarOptionals.DateOfBirth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarFormParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarFormParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarFormParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address4.IsSet() {
		localVarFormParams.Add("address4", parameterToString(localVarOptionals.Address4.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address5.IsSet() {
		localVarFormParams.Add("address5", parameterToString(localVarOptionals.Address5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarFormParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarFormParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarFormParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PostalCode.IsSet() {
		localVarFormParams.Add("postalCode", parameterToString(localVarOptionals.PostalCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarFormParams.Add("countryCode", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PrimaryPhone.IsSet() {
		localVarFormParams.Add("primaryPhone", parameterToString(localVarOptionals.PrimaryPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OtherPhone.IsSet() {
		localVarFormParams.Add("otherPhone", parameterToString(localVarOptionals.OtherPhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhone.IsSet() {
		localVarFormParams.Add("mobilePhone", parameterToString(localVarOptionals.MobilePhone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobileCarrierId.IsSet() {
		localVarFormParams.Add("mobileCarrierId", parameterToString(localVarOptionals.MobileCarrierId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarFormParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebUid.IsSet() {
		localVarFormParams.Add("webUid", parameterToString(localVarOptionals.WebUid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WebPwd.IsSet() {
		localVarFormParams.Add("webPwd", parameterToString(localVarOptionals.WebPwd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretQuestion.IsSet() {
		localVarFormParams.Add("secretQuestion", parameterToString(localVarOptionals.SecretQuestion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecretAnswer.IsSet() {
		localVarFormParams.Add("secretAnswer", parameterToString(localVarOptionals.SecretAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonthlyIncome.IsSet() {
		localVarFormParams.Add("monthlyIncome", parameterToString(localVarOptionals.MonthlyIncome.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonthlyLiab.IsSet() {
		localVarFormParams.Add("monthlyLiab", parameterToString(localVarOptionals.MonthlyLiab.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessName.IsSet() {
		localVarFormParams.Add("businessName", parameterToString(localVarOptionals.BusinessName.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault37
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Verify Account
Use the Verify Account endpoint to return information on an account. For example, you can use this endpoint to validate that you can call &lt;a href&#x3D;\&quot;ref:post_createpayment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Payment&lt;/a&gt; on the account without violating the load amount. Verify Account will also return secondary accounts that share the same balance ID and product ID.  This endpoint returns: * Current account balance &amp;mdash; Both posted and authorized transactions are factored into the balance amount * Current maximum amount that can be loaded into the account, according to product parameters * External account ID * Account PRN * Galileo account number (balance ID) 
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostVerifyaccountOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "LoadType" (optional.String) - 
     * @param "IncludeRelated" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault47
*/

type AccountsAndCardsApiPostVerifyaccountOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    LoadType optional.String
    IncludeRelated optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostVerifyaccount(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostVerifyaccountOpts) (InlineResponseDefault47, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault47
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/verifyAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LoadType.IsSet() {
		localVarFormParams.Add("loadType", parameterToString(localVarOptionals.LoadType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeRelated.IsSet() {
		localVarFormParams.Add("includeRelated", parameterToString(localVarOptionals.IncludeRelated.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault47
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Verify Card Security Code
Use the Verify Card Security Code endpoint to validate a &lt;&lt;glossary:CVV&gt;&gt; for the specified card that a cardholder inputs. Returns success on a match or failure if it does not match. This endpoint does not return the CVV.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostVerifycardsecuritycodeOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "CardNumber" (optional.String) - 
     * @param "CardSecurityCode" (optional.String) - 
     * @param "CardExpiryDate" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostVerifycardsecuritycodeOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    CardNumber optional.String
    CardSecurityCode optional.String
    CardExpiryDate optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostVerifycardsecuritycode(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostVerifycardsecuritycodeOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/verifyCardSecurityCode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardNumber.IsSet() {
		localVarFormParams.Add("cardNumber", parameterToString(localVarOptionals.CardNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardSecurityCode.IsSet() {
		localVarFormParams.Add("cardSecurityCode", parameterToString(localVarOptionals.CardSecurityCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardExpiryDate.IsSet() {
		localVarFormParams.Add("cardExpiryDate", parameterToString(localVarOptionals.CardExpiryDate.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Verify Enrollment
Use the Verify Enrollment endpoint to look up an existing enrollment by &#x60;transactionId&#x60; or &#x60;id&#x60; to view information and status. The endpoint returns enrollment data, credit limit (if applicable), enrollment date, and &#x60;transactionID&#x60; of the initial enrollment, if the enrollment was initiated with the &lt;a href&#x3D;\&quot;ref:post_startenrollment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Start Enrollment&lt;/a&gt; or &lt;a href&#x3D;\&quot;ref:post_createaccount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create Account&lt;/a&gt; endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostVerifyenrollmentOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "Id" (optional.String) - 
     * @param "IdType" (optional.Int32) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault38
*/

type AccountsAndCardsApiPostVerifyenrollmentOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    Id optional.String
    IdType optional.Int32
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostVerifyenrollment(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostVerifyenrollmentOpts) (InlineResponseDefault38, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault38
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/verifyEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdType.IsSet() {
		localVarFormParams.Add("idType", parameterToString(localVarOptionals.IdType.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault38
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountsAndCardsApiService Void Add Card
Use the Void Add Card endpoint to cancel a card that was added to an account using the &lt;a href&#x3D;\&quot;ref:post_addcard\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Add Card&lt;/a&gt; endpoint. For &#x60;transactionId&#x60;, pass the &#x60;transaction_id&#x60; from the original Add Card **response** (not request).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AccountsAndCardsApiPostVoidaddcardOpts - Optional Parameters:
     * @param "ApiLogin" (optional.String) - 
     * @param "ApiTransKey" (optional.String) - 
     * @param "ProviderId" (optional.Int32) - 
     * @param "TransactionId" (optional.String) - 
     * @param "AccountNo" (optional.String) - 
     * @param "ResponseContentType" (optional.String) -  Use &#x60;xml&#x60; or &#x60;json&#x60; to specify the type of response. The default value is &#x60;xml&#x60;. Use this instead of the standard &#x60;accept&#x60; header.
@return InlineResponseDefault16
*/

type AccountsAndCardsApiPostVoidaddcardOpts struct {
    ApiLogin optional.String
    ApiTransKey optional.String
    ProviderId optional.Int32
    TransactionId optional.String
    AccountNo optional.String
    ResponseContentType optional.String
}

func (a *AccountsAndCardsApiService) PostVoidaddcard(ctx context.Context, localVarOptionals *AccountsAndCardsApiPostVoidaddcardOpts) (InlineResponseDefault16, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponseDefault16
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/voidAddCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ResponseContentType.IsSet() {
		localVarHeaderParams["response-content-type"] = parameterToString(localVarOptionals.ResponseContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ApiLogin.IsSet() {
		localVarFormParams.Add("apiLogin", parameterToString(localVarOptionals.ApiLogin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiTransKey.IsSet() {
		localVarFormParams.Add("apiTransKey", parameterToString(localVarOptionals.ApiTransKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProviderId.IsSet() {
		localVarFormParams.Add("providerId", parameterToString(localVarOptionals.ProviderId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransactionId.IsSet() {
		localVarFormParams.Add("transactionId", parameterToString(localVarOptionals.TransactionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountNo.IsSet() {
		localVarFormParams.Add("accountNo", parameterToString(localVarOptionals.AccountNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InlineResponseDefault16
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
