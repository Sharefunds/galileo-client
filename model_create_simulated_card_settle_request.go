/*
 * Program API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 4.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type CreateSimulatedCardSettleRequest struct {
	// Web service username, as provided by Galileo. Pattern: Max 50 characters Example: `\"AbC123-9999\"`
	ApiLogin string `json:"apiLogin,omitempty"`
	// Web service password, as provided by Galileo. Pattern: Max 15 characters Example: `\"4sb62fh6w4h7w34g\"`
	ApiTransKey string `json:"apiTransKey,omitempty"`
	// Galileo-issued provider identifier. Pattern: Max 10 digits Example: `9999`
	ProviderId int32 `json:"providerId,omitempty"`
	// A unique provider-generated ID to identify this API call. A UUID is preferred. This value is used for <a href=\"ref:idempotency\" target=\"_blank\">idempotency</a>. Pattern: 60 characters or less Example: `\"9845dk-39fdk3fj3-4483483478\"`
	TransactionId string `json:"transactionId"`
	LogQueries int32 `json:"logQueries,omitempty"`
	// The <<glossary:PRN>> or <<glossary:PAN>> of the account. Pattern: PAN or PRN  Example: `\"074103447228\"`
	AccountNo string `json:"accountNo"`
	// The amount of the transaction in the currency at the point of sale. Pattern: Positive integer or decimal number Example: `100.00`, `100`, or `100.73`
	Amount float32 `json:"amount,omitempty"`
	// Specifies which card network to simulate: `visa` for Visa or `star` for Star or `mc_auth` for Mastercard or `visa_baseii` for Visa Base II. Pattern: `visa` or `mc_auth` or `visa_baseii` Example: `\"visa\"`
	Association string `json:"association"`
	// Simulated merchant name. Pass 40 characters for the complete string or pass up to 22 characters and the simulator will add 18 characters of a simulated address. Pattern: Max 40 alphanumeric characters Example: `\"Fred Jones Bagels\"`
	MerchantName string `json:"merchantName,omitempty"`
	// Simulated acquirer ID. If this value is not passed, the simulator inserts a random 6-digit number. Pattern: 6-digit number Example: `437723`
	AcquirerId string `json:"acquirerId,omitempty"`
	// Simulated terminal ID. If this value is not passed, the simulator inserts a random 8-digit number. Pattern: 8-digit number Example: `57395783`
	TerminalId string `json:"terminalId,omitempty"`
	// Simulated merchant ID. If this value is not passed, the simulator inserts a random 15-character alphanumeric string. Pattern: Max 15 alphanumeric characters Example: `\"asdf45sdf6sd3d0a\"`
	MerchantId string `json:"merchantId,omitempty"`
	// The currency code for `amount`. Use ISO 4217 numeric currency codes. This parameter is required when using this endpoint outside the United States. Pattern: 3 digits Example: `\"840\"`
	CurrencyCode string `json:"currencyCode,omitempty"`
	// The amount to be transferred from merchant to issuer in the settlement currency. Required when `specialFunctions: make_multicurrency` Pattern: Positive integer or decimal number Example: `100.00`, `100`, or `100.73`
	SettleAmount float32 `json:"settleAmount,omitempty"`
	// The currency code for `settleAmount`. Use ISO 4217 numeric currency codes. Required when `specialFunctions: make_multicurrency`. Pattern: 3 digits Example: `\"124\"`
	SettleCurrencyCode string `json:"settleCurrencyCode,omitempty"`
	// The amount that will be posted to the cardholder account in the currency of the account. Required when `specialFunctions: make_multicurrency`. Pattern: Positive integer or decimal number Example: `100.00`, `100`, or `100.73`
	CardBillingAmount float32 `json:"cardBillingAmount,omitempty"`
	// The currency code for `cardBillingAmount`. Use ISO 4217 numeric currency codes. Required when `specialFunctions: make_multicurrency`. Pattern: 3 digits Example: `484`
	CardBillingCurrencyCode string `json:"cardBillingCurrencyCode,omitempty"`
	// ISO 18245 merchant category code. Pattern: 4 digits Example: `3408`
	Mcc string `json:"mcc,omitempty"`
	// The `auth_id` of the previous authorization in a series, such as with a completion, reversal or incremental authorization. Required when `transType` is `3`, `4`, `5` or `6` (Visa) or `3` (Mastercard) or `4`, `5`, `6` (Star). Pattern: Numerals Example: `30582`
	OriginalAuthId string `json:"originalAuthId,omitempty"`
	// Additional function to add to the simulated transaction. See the <a href=\"ref:api-reference-special-functions\" target=\"_blank\">Special Functions</a> enumeration for valid values.  Pattern: Max 100 characters Example `\"add_cashback\"`
	SpecialFunctions string `json:"specialFunctions,omitempty"`
	// The first two characters of DE022. Specifies how the PAN was entered, such as magnetic stripe, EMV chip or contactless. See <a href=\"ref:api-reference-de022-codes\" target=\"_blank\">DE022 Codes</a> for possible values. Valid only when `association: visa`. Pattern: 2 characters Example: `01`
	PosEntryMode string `json:"posEntryMode,omitempty"`
	// An identifier for the entity that makes a tokenization request. Required when `specialFunctions: make_tokenized`. Pattern: Numerals Example: `3030303`
	RequesterId string `json:"requesterId,omitempty"`
	// Identifier for the mobile wallet that contains the card that was used for the transaction. Required when `association: mc_auth` and `specialFunctions: make_tokenized`. Pattern: Numerals Example: `474747474`
	WalletId string `json:"walletId,omitempty"`
	// The latitude and longitude of the point of sale. Valid only when `association: visa` and `transType: 17`. Default: `40.76078/-111.89105` (Salt Lake City, UT) Pattern: 99.99999/-99.99999 Example: `\"40.76078/-111.89105\"`
	LatitudeAndLongitude string `json:"latitudeAndLongitude,omitempty"`
	// Amount of a partial authorization.  Valid only when `association: mc_auth` and `specialFunctions: make_partial_reversal`.  Pattern: Integer or decimal amount Example:  `100.00`, `100`, or `100.73`
	PartialAmount float32 `json:"partialAmount,omitempty"`
	// Amount of a partial authorization when the point of sale is a different country than the account. Valid only when `association: mc_auth` and `specialFunctions: make_partial_reversal`. Pattern: Integer or decimal amount Example:  `100.00`, `100`, or `100.73`
	PartialForeignAmount float32 `json:"partialForeignAmount,omitempty"`
	// Amount in `localAmt` that is provided in cash (debit accounts only). Valid only when `association: mc_auth` and `specialFunctions: make_cashback`. Debit accounts only. Pattern: Integer or decimal amount Example: `100.00`, `100`, or `100.73`
	CashbackAmount float32 `json:"cashbackAmount,omitempty"`
	// Amount in `localAmt` that is provided in cash (credit accounts only). Valid only when `association: mc_auth` and `specialFunctions: make_cashback`.  Credit accounts only. Pattern: Positive integer or decimal number Example: `100.00`, `100`, or `100.73`
	CashAdvanceAmount float32 `json:"cashAdvanceAmount,omitempty"`
	// Personal identification number. Valid when testing a PIN transaction, meaning that `transType: 15` or `specialFunctions: add_pin` (Visa) or when `transType: 10` (Mastercard). Passing a value changes the PIN that you already set for the card. Pattern: 4 digits Example: `4395`
	Pin string `json:"pin,omitempty"`
	// The type of transaction to simulate. See the <a href=\"ref:api-reference-simulated-transaction-types\" target=\"_blank\">Simulated Transaction Types</a> enumeration for valid values. Pattern: 1 or 2 digits Example: `3`
	TransType int32 `json:"transType,omitempty"`
	// The authorization ID (`auth_id`) as returned by the <a href=\"ref:post_createsimulatedcardauth\" target=\"_blank\">Create Simulated Card Authorization</a> endpoint. Pattern: Positive integer Example: `58344373`
	AuthId string `json:"authId,omitempty"`
}
